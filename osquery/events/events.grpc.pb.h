// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: events.proto
#ifndef GRPC_events_2eproto__INCLUDED
#define GRPC_events_2eproto__INCLUDED

#include "events.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace containerd {
namespace services {
namespace events {
namespace v1 {

class Events final {
 public:
  static constexpr char const* service_full_name() {
    return "containerd.services.events.v1.Events";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Publish an event to a topic.
    //
    // The event will be packed into a timestamp envelope with the namespace
    // introspected from the context. The envelope will then be dispatched.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncPublish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    // Forward sends an event that has already been packaged into an envelope
    // with a timestamp and namespace.
    //
    // This is useful if earlier timestamping is required or when forwarding on
    // behalf of another component, namespace or publisher.
    virtual ::grpc::Status Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncForward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncForward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncForwardRaw(context, request, cq));
    }
    // Subscribe to a stream of events, possibly returning only that match any
    // of the provided filters.
    //
    // Unlike many other methods in containerd, subscribers will get messages
    // from all namespaces unless otherwise specified. If this is not desired,
    // a filter can be provided in the format 'namespace==<namespace>' to
    // restrict the received events.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::containerd::services::events::v1::Envelope>> Subscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::containerd::services::events::v1::Envelope>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>> AsyncSubscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Publish an event to a topic.
      //
      // The event will be packed into a timestamp envelope with the namespace
      // introspected from the context. The envelope will then be dispatched.
      virtual void Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Forward sends an event that has already been packaged into an envelope
      // with a timestamp and namespace.
      //
      // This is useful if earlier timestamping is required or when forwarding on
      // behalf of another component, namespace or publisher.
      virtual void Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Subscribe to a stream of events, possibly returning only that match any
      // of the provided filters.
      //
      // Unlike many other methods in containerd, subscribers will get messages
      // from all namespaces unless otherwise specified. If this is not desired,
      // a filter can be provided in the format 'namespace==<namespace>' to
      // restrict the received events.
      virtual void Subscribe(::grpc::ClientContext* context, ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::containerd::services::events::v1::Envelope>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::containerd::services::events::v1::Envelope>* SubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::containerd::services::events::v1::Envelope>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncPublish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncForward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncForward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::containerd::services::events::v1::Envelope>> Subscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::containerd::services::events::v1::Envelope>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>> AsyncSubscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::containerd::services::events::v1::Envelope>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::containerd::services::events::v1::Envelope>* SubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_Forward_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Publish an event to a topic.
    //
    // The event will be packed into a timestamp envelope with the namespace
    // introspected from the context. The envelope will then be dispatched.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response);
    // Forward sends an event that has already been packaged into an envelope
    // with a timestamp and namespace.
    //
    // This is useful if earlier timestamping is required or when forwarding on
    // behalf of another component, namespace or publisher.
    virtual ::grpc::Status Forward(::grpc::ServerContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response);
    // Subscribe to a stream of events, possibly returning only that match any
    // of the provided filters.
    //
    // Unlike many other methods in containerd, subscribers will get messages
    // from all namespaces unless otherwise specified. If this is not desired,
    // a filter can be provided in the format 'namespace==<namespace>' to
    // restrict the received events.
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::containerd::services::events::v1::PublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Forward() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForward(::grpc::ServerContext* context, ::containerd::services::events::v1::ForwardRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::containerd::services::events::v1::Envelope>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Publish<WithAsyncMethod_Forward<WithAsyncMethod_Subscribe<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Publish() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::containerd::services::events::v1::PublishRequest, ::google::protobuf::Empty>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response) { return this->Publish(context, request, response); }));}
    void SetMessageAllocatorFor_Publish(
        ::grpc::experimental::MessageAllocator< ::containerd::services::events::v1::PublishRequest, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::containerd::services::events::v1::PublishRequest, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Publish(::grpc::experimental::CallbackServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Forward() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::containerd::services::events::v1::ForwardRequest, ::google::protobuf::Empty>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response) { return this->Forward(context, request, response); }));}
    void SetMessageAllocatorFor_Forward(
        ::grpc::experimental::MessageAllocator< ::containerd::services::events::v1::ForwardRequest, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::containerd::services::events::v1::ForwardRequest, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Forward(::grpc::experimental::CallbackServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::containerd::services::events::v1::SubscribeRequest, ::containerd::services::events::v1::Envelope>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::containerd::services::events::v1::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::containerd::services::events::v1::Envelope>* Subscribe(::grpc::experimental::CallbackServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_Publish<ExperimentalWithCallbackMethod_Forward<ExperimentalWithCallbackMethod_Subscribe<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Forward() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Forward() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Publish() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Publish(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Publish(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Forward() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Forward(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Forward(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::containerd::services::events::v1::PublishRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Publish<BaseClass>::StreamedPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::PublishRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::containerd::services::events::v1::PublishRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Forward() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::containerd::services::events::v1::ForwardRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Forward<BaseClass>::StreamedForward, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::ForwardRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::containerd::services::events::v1::ForwardRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_Forward<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::containerd::services::events::v1::SubscribeRequest, ::containerd::services::events::v1::Envelope>(std::bind(&WithSplitStreamingMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::containerd::services::events::v1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::containerd::services::events::v1::SubscribeRequest,::containerd::services::events::v1::Envelope>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_Forward<WithSplitStreamingMethod_Subscribe<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace events
}  // namespace services
}  // namespace containerd


#endif  // GRPC_events_2eproto__INCLUDED
