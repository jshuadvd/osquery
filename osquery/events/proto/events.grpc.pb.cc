// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: events.proto

#include "events.pb.h"
#include "events.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace containerd {
namespace services {
namespace events {
namespace v1 {

static const char* Events_method_names[] = {
  "/containerd.services.events.v1.Events/Publish",
  "/containerd.services.events.v1.Events/Forward",
  "/containerd.services.events.v1.Events/Subscribe",
};

std::unique_ptr< Events::Stub> Events::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Events::Stub> stub(new Events::Stub(channel));
  return stub;
}

Events::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Publish_(Events_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Forward_(Events_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(Events_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Events::Stub::Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void Events::Stub::experimental_async::Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void Events::Stub::experimental_async::Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void Events::Stub::experimental_async::Publish(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

void Events::Stub::experimental_async::Publish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Events::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Events::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, false);
}

::grpc::Status Events::Stub::Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Forward_, context, request, response);
}

void Events::Stub::experimental_async::Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, std::move(f));
}

void Events::Stub::experimental_async::Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, std::move(f));
}

void Events::Stub::experimental_async::Forward(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, reactor);
}

void Events::Stub::experimental_async::Forward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Events::Stub::AsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Forward_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Events::Stub::PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Forward_, context, request, false);
}

::grpc::ClientReader< ::containerd::services::events::v1::Envelope>* Events::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::containerd::services::events::v1::Envelope>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void Events::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::containerd::services::events::v1::Envelope>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::containerd::services::events::v1::Envelope>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>* Events::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containerd::services::events::v1::Envelope>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::containerd::services::events::v1::Envelope>* Events::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::containerd::services::events::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::containerd::services::events::v1::Envelope>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

Events::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Events_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Events::Service, ::containerd::services::events::v1::PublishRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Events::Service::Publish), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Events_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Events::Service, ::containerd::services::events::v1::ForwardRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Events::Service::Forward), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Events_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Events::Service, ::containerd::services::events::v1::SubscribeRequest, ::containerd::services::events::v1::Envelope>(
          std::mem_fn(&Events::Service::Subscribe), this)));
}

Events::Service::~Service() {
}

::grpc::Status Events::Service::Publish(::grpc::ServerContext* context, const ::containerd::services::events::v1::PublishRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Events::Service::Forward(::grpc::ServerContext* context, const ::containerd::services::events::v1::ForwardRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Events::Service::Subscribe(::grpc::ServerContext* context, const ::containerd::services::events::v1::SubscribeRequest* request, ::grpc::ServerWriter< ::containerd::services::events::v1::Envelope>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace containerd
}  // namespace services
}  // namespace events
}  // namespace v1

